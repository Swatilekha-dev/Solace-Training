//All the screenshot is in this link :
https://docs.google.com/document/d/1AjLfoLU1YDefkz9hgk4R1AoYc0lM-k-BHxPgVkxCRPY/edit?usp=sharing


Q1. Refer FB + LinkedIn API's :: Try some of the API's in Postman

- Which API referred
Ans. https://graph.facebook.com/v17.0/me

- What did you understand from the API's
Ans. We can acess the Facebook's fancalities through this API.

- What are the parameters + endpoints
Ans. For Facebook -
parameters :: fields=id,name,email,last_name&access_token=(access_token)
endpoints ::  /v17.0/me

- What are the business utlities of the API's 
Ans. Application Programming Interfaces (APIs) are a set of software that connects two or more systems/application to perform specific operations.

Q8. Write a NodeJS code for :

a. Create a dummy calculator :: Addition/Subtraction/Division [check for division by 0]
b. parse a sample XML file using NodeJS and display the response in browser.

Ans. 
a.calculator.js

```
// Importing required modules
const express = require('express');
const bodyParser = require('body-parser');

// Creating an Express application
const app = express();
const port = 3000;

// Middleware to parse request bodies
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Calculator endpoints
app.post('/add', (req, res) => {
  const { num1, num2 } = req.body;
  if (!num1 || !num2) {
    res.status(400).json({ error: 'Please provide both numbers' });
  } else {
    const result = parseFloat(num1) + parseFloat(num2);
    res.json({ result });
  }
});

app.post('/subtract', (req, res) => {
  const { num1, num2 } = req.body;
  if (!num1 || !num2) {
    res.status(400).json({ error: 'Please provide both numbers' });
  } else {
    const result = parseFloat(num1) - parseFloat(num2);
    res.json({ result });
  }
});

app.post('/multiply', (req, res) => {
  const { num1, num2 } = req.body;
  if (!num1 || !num2) {
    res.status(400).json({ error: 'Please provide both numbers' });
  } else {
    const result = parseFloat(num1) * parseFloat(num2);
    res.json({ result });
  }
});

app.post('/divide', (req, res) => {
  const { num1, num2 } = req.body;
  if (!num1 || !num2) {
    res.status(400).json({ error: 'Please provide both numbers' });
  } else {
    const divisor = parseFloat(num2);
    if (divisor === 0) {
      res.status(400).json({ error: 'Division by zero is not allowed' });
    } else {
      const result = parseFloat(num1) / divisor;
      res.json({ result });
    }
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Dummy Calculator app listening at http://localhost:${port}`);
});
```
b. xml_parser.js

```
// Importing required modules
const express = require('express');
const fs = require('fs');
const xml2js = require('xml2js');

// Creating an Express application
const app = express();
const port = 3001;

// Read and parse the XML file
fs.readFile('sample.xml', (err, data) => {
  if (err) {
    console.error('Error reading the XML file:', err);
    return;
  }

  xml2js.parseString(data, (err, result) => {
    if (err) {
      console.error('Error parsing the XML:', err);
      return;
    }

    // Endpoint to display the parsed XML response
    app.get('/xml', (req, res) => {
      res.json(result);
    });

    // Start the server
    app.listen(port, () => {
      console.log(`XML Parsing app listening at http://localhost:${port}`);
    });
  });
});
```

c. sample.xml

```
<employees>
  <employee>
    <id>1</id>
    <name>Diya Mitra</name>
  </employee>
  <employee>
    <id>2</id>
    <name>Swatilekha Mitra</name>
  </employee>
</employees>
```

6. What is an endpoint [ NOT API endpoints --> Queue endpoint + topic endpoint ]

Ans. A topic endpoint attracts messages published to a single topic for which the topic endpoint has a matching subscription. Any topic endpoint whose topic subscription matches the topic on the incoming messages will receive those messages.

A queue is an endpoint configured with topic subscriptions that clients can publish messages to and consume messages from. Queues can subscribe to more than one topic and receive messages for all topics matching their subscriptions. Queues can provide exclusive access to one consumer or access to multiple consumers where messages are distributed among the consumers.

7. What is High Availability Architecture? what happens in High Availability Architecture
Ans. A high available architecture is an architecture which has minimum downtime, eliminate single points of failure, and enhance reliability to meet the demands of businesses and users who require continuous access to critical services and applications.

In a high availability architecture, there are a number of different components, modules, or services that work together to maintain optimal performance, irrespective of peak-time loads. It consists of scaling capabilities like service replicas and might have multiple backups of data to reduce the downtime and maintain availibility even in case critical failures. 

some key elements and concepts typically involved in such architectures:
1. Redundancy (s/w, h/w and data)
2. Load Balancing
3. Backup and Restore
4. Monitoring and Alerting



